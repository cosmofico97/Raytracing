# -*- encoding: utf-8 -*-
#
# The MIT License (MIT)
#
# Copyright Â© 2021 Matteo Foglieni and Riccardo Gervasoni
#
#
# EARTH AND SUN
# Here we create an image of the earth and the Sun inside the Milky-Way.
# In order to render this image, run in the CLI:
#
#    ./Raytracer.jl render examples/earth_and_sun.txt flat
#
# As you probably have already understood, there are four possible renderer algorithms.
# Each of them connects with different rules the color of a pixel and the light ray that starts
# from that pixel and hit (or not) an object of the rendered scene:
# - onoff : each pixel is set to the "background_color" if no shape is hitten by its light ray, 
#         otherwise is set to "color"; this renderer exists only for debugging purposes
# - flat : each pixel is set to the "background_color" if no shape is hitten by its light ray, 
#         otherwise is set to the color of the hitted shape point; this renderer is very efficient,
#         but it does not solve the rendering equation.
#         Consequently, no shadows or brightness are rendered.
# - pathtracer : this is the TRUE renderer. It solves the rendering equation in the "standard"
#         way, and for this reason its very burdensome to be used, specifically for the rendereing
#         times needed to create the image.
#         Nevertheless, the rendered images are incomparably more realistic that the ones
#         maded with the other three renderers; USE THIS RENDERER WITH FORESIGHT!
# - pointlight : it's the "cheap solution" for a realistic image. This renderer creates an image
#         setting each pixel colored or not depending on the "line of sight" between that point
#         and the point-light sources in the scene.
#         It's very fast, and the images rendered are perfect for an astrophysical context or for
#         very bright days of summer; it's, nevertheless, a simple solution in order to avoid
#         the longer times needed for the pathtracer algorithm.
FLOAT mult(1.0)

# This type of image is very long to be rendered with "pathtracer"; use "pointlight"
# or "flat" instead!


CAMERA(PERSPECTIVE, TRANSLATION([-2, 0, 1]), 1.0, 1.0)

VECTOR earth_pos([0.5, -1.0, 0.0])
FLOAT earth_radius(1.0)
FLOAT earth_lum(0.001)
STRING earth_path ("images/earth.jpg")
BRDF earth_brdf (DIFFUSE(IMAGE(earth_path)))
PIGMENT earth_emitted_pigment ( UNIFORM(<earth_lum,earth_lum,earth_lum>) )


VECTOR sun_pos([4.0, 3.0, 0.0])
FLOAT sun_radius(1.0)
FLOAT sun_lum(0.0)
STRING sun_path ("images/sun.jpg")
BRDF sun_brdf (DIFFUSE(IMAGE(sun_path)))
PIGMENT sun_emitted_pigment ( UNIFORM(<sun_lum, sun_lum, sun_lum>) )
BOOL sun(TRUE) # This bool for the sun is fundamental for the pointlight algorithm!
# It allows to the rays emitted from the pointlight (that is placed inside the sun
# in this spatial configuration, see below) not to be stopped by the sun surface.
# If you set this to FALSE or do not pass it, the image will be dark, except for
# the sun itself.

VECTOR milky_way_pos([0.0, 0.0, 0.0])
FLOAT milky_way_radius(20.0)
FLOAT milky_way_lum(0.00)
STRING milky_way_path ("images/milky_way_HD.jpg")
BRDF milky_way_brdf (DIFFUSE(IMAGE(milky_way_path)))
PIGMENT milky_way_emitted_pigment ( UNIFORM(<milky_way_lum,milky_way_lum,milky_way_lum>) )


MATERIAL earth_material( 
     earth_brdf, 
     earth_emitted_pigment
)
MATERIAL sun_material( 
     sun_brdf, 
     sun_emitted_pigment
)
MATERIAL milky_way_material(
     milky_way_brdf, 
     milky_way_emitted_pigment
)

TRANSFORMATION earth_trans(
     TRANSLATION(earth_pos)
     * SCALING([mult*earth_radius, mult* earth_radius, mult*earth_radius])
)
SPHERE(
     earth_material,
     earth_trans
     )


TRANSFORMATION sun_trans(
     TRANSLATION(sun_pos)
     * SCALING([sun_radius, sun_radius, sun_radius])
)

SPHERE(
     sun_material,
     sun_trans,
     sun
     )


TRANSFORMATION milky_way_trans (
     TRANSLATION(milky_way_pos)
     * SCALING([milky_way_radius, milky_way_radius, milky_way_radius])
)
   
SPHERE(
     milky_way_material,
     milky_way_trans
     )

FLOAT pl_lum(1.0)
COLOR sun_pointlight_lum(<pl_lum, pl_lum, pl_lum>)
POINTLIGHT(
     sun_pos, 
     sun_pointlight_lum
     )



