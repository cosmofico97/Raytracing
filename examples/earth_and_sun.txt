# -*- encoding: utf-8 -*-
#
# The MIT License (MIT)
#
# Copyright Â© 2021 Matteo Foglieni and Riccardo Gervasoni
#
#
# EARTH AND SUN
# Here we create an image of the earth and the Sun inside the Milky-Way.
# In order to render this image, run in the CLI:
#
#    ./Raytracer.jl render examples/earth_and_sun.txt flat
#
# As you probably have already understood, there are four possible renderer algorithms:
# - onoff : 
# - flat :
# - pathtracer : 
# - pointlight : 
# This type of image is very long to be rendered with "pathtracer"; use "pointlight"
# or "flat" instead!


CAMERA(PERSPECTIVE, TRANSLATION([-2, 0, 1]), 1.0, 1.0)

VECTOR earth_pos([0.5, -1.0, 0.0])
FLOAT earth_radius(1.0)
FLOAT earth_lum(0.001)
STRING earth_path ("images/earth.jpg")
BRDF earth_BRDF (DIFFUSE(image(earth_path)))
PIGMENT earth_emitted_pigment ( UNIFORM(<earth_lum,earth_lum,earth_lum>) )


VECTOR sun_pos([4.0, 3.0, 0.0])
FLOAT sun_radius(1.0)
FLOAT sun_lum(0.0)
STRING sun_path ("images/sun.jpg")
BRDF sun_brdf (DIFFUSE(image(sun_path)))
PIGMENT sun_emitted_pigment ( UNIFORM(<sun_lum, sun_lum, sun_lum>) )
BOOL sun(true) # This bool for the sun is fundamental for the pointlight algorithm!
# It allows to the rays emitted from the pointlight (that is placed inside the sun
# in this spatial configuration, see below) not to be stopped by the sun surface.
# If you set this to "false" or do not pass it, the image will be dark, except for
# the sun itself.

VECTOR milky_way_pos([0.0, 0.0, 0.0])
FLOAT milky_way_radius(20.0)
FLOAT milky_way_lum(0.00)
STRING milky_way_path ("images/milky_way_HD.jpg")
BRDF milky_way_brdf (DIFFUSE(image(milky_way_path)))
PIGMENT milky_way_emitted_pigment ( UNIFORM(<milky_way_lum,milky_way_lum,milky_way_lum>) )


MATERIAL earth_material( 
     earth_brdf, 
     earth_emitted_pigment
)
MATERIAL sun_material( 
     sun_brdf, 
     sun_emitted_pigment
)
MATERIAL milky_way_material(
     milky_way_brdf, 
     milky_way_emitted_pigment
)

TRANSFORMATION earth_trans(
     TRANSLATION(earth_pos)
     * SCALING([earth_radius, earth_radius, earth_radius])
)
SPHERE(
     earth_material,
     earth_trans
     )


TRANSFORMATION sun_trans(
     TRANSLATION(sun_pos)
     * SCALING([sun_radius, sun_radius, sun_radius])
)

SPHERE(
     sun_MATERIAL,
     sun_trans,
     sun
     )


TRANSFORMATION milky_way_trans (
     TRANSLATION(milky_way_pos)
     * SCALING([milky_way_radius, milky_way_radius, milky_way_radius])
)
   
SPHERE(
     milky_way_material,
     milky_way_trans
     )

FLOAT pl_lum(1.0)
COLOR sun_pointlight_lum(<pl_lum, pl_lum, pl_lum>)
POINTLIGHT(
     sun_pos, 
     sun_pointlight_lum
     )



